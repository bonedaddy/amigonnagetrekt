package main

import "time"

type AutoGenerated struct {
	ContractName string `json:"contractName"`
	Abi          []struct {
		Anonymous bool `json:"anonymous,omitempty"`
		Inputs    []struct {
			Indexed      bool   `json:"indexed"`
			InternalType string `json:"internalType"`
			Name         string `json:"name"`
			Type         string `json:"type"`
		} `json:"inputs"`
		Name     string `json:"name"`
		Type     string `json:"type"`
		Constant bool   `json:"constant,omitempty"`
		Outputs  []struct {
			InternalType string `json:"internalType"`
			Name         string `json:"name"`
			Type         string `json:"type"`
		} `json:"outputs,omitempty"`
		Payable         bool   `json:"payable,omitempty"`
		StateMutability string `json:"stateMutability,omitempty"`
	} `json:"abi"`
	Metadata          string `json:"metadata"`
	Bytecode          string `json:"bytecode"`
	DeployedBytecode  string `json:"deployedBytecode"`
	SourceMap         string `json:"sourceMap"`
	DeployedSourceMap string `json:"deployedSourceMap"`
	Source            string `json:"source"`
	SourcePath        string `json:"sourcePath"`
	Ast               struct {
		AbsolutePath    string `json:"absolutePath"`
		ExportedSymbols struct {
			AddressWhitelist []int `json:"AddressWhitelist"`
		} `json:"exportedSymbols"`
		ID       int    `json:"id"`
		NodeType string `json:"nodeType"`
		Nodes    []struct {
			ID            int           `json:"id"`
			Literals      []string      `json:"literals,omitempty"`
			NodeType      string        `json:"nodeType"`
			Src           string        `json:"src"`
			AbsolutePath  string        `json:"absolutePath,omitempty"`
			File          string        `json:"file,omitempty"`
			Scope         int           `json:"scope,omitempty"`
			SourceUnit    int           `json:"sourceUnit,omitempty"`
			SymbolAliases []interface{} `json:"symbolAliases,omitempty"`
			UnitAlias     string        `json:"unitAlias,omitempty"`
			BaseContracts []struct {
				Arguments interface{} `json:"arguments"`
				BaseName  struct {
					ContractScope         interface{} `json:"contractScope"`
					ID                    int         `json:"id"`
					Name                  string      `json:"name"`
					NodeType              string      `json:"nodeType"`
					ReferencedDeclaration int         `json:"referencedDeclaration"`
					Src                   string      `json:"src"`
					TypeDescriptions      struct {
						TypeIdentifier string `json:"typeIdentifier"`
						TypeString     string `json:"typeString"`
					} `json:"typeDescriptions"`
				} `json:"baseName"`
				ID       int    `json:"id"`
				NodeType string `json:"nodeType"`
				Src      string `json:"src"`
			} `json:"baseContracts,omitempty"`
			ContractDependencies    []int  `json:"contractDependencies,omitempty"`
			ContractKind            string `json:"contractKind,omitempty"`
			Documentation           string `json:"documentation,omitempty"`
			FullyImplemented        bool   `json:"fullyImplemented,omitempty"`
			LinearizedBaseContracts []int  `json:"linearizedBaseContracts,omitempty"`
			Name                    string `json:"name,omitempty"`
			Nodes                   []struct {
				CanonicalName string `json:"canonicalName,omitempty"`
				ID            int    `json:"id"`
				Members       []struct {
					ID       int    `json:"id"`
					Name     string `json:"name"`
					NodeType string `json:"nodeType"`
					Src      string `json:"src"`
				} `json:"members,omitempty"`
				Name             string `json:"name"`
				NodeType         string `json:"nodeType"`
				Src              string `json:"src"`
				Constant         bool   `json:"constant,omitempty"`
				Scope            int    `json:"scope,omitempty"`
				StateVariable    bool   `json:"stateVariable,omitempty"`
				StorageLocation  string `json:"storageLocation,omitempty"`
				TypeDescriptions struct {
					TypeIdentifier string `json:"typeIdentifier"`
					TypeString     string `json:"typeString"`
				} `json:"typeDescriptions,omitempty"`
				TypeName
				Value         interface{} `json:"value,omitempty"`
				Visibility    string      `json:"visibility,omitempty"`
				Anonymous     bool        `json:"anonymous,omitempty"`
				Documentation interface{} `json:"documentation,omitempty"`
				Parameters    struct {
					ID         int    `json:"id"`
					NodeType   string `json:"nodeType"`
					Parameters []struct {
						Constant         bool   `json:"constant"`
						ID               int    `json:"id"`
						Indexed          bool   `json:"indexed"`
						Name             string `json:"name"`
						NodeType         string `json:"nodeType"`
						Scope            int    `json:"scope"`
						Src              string `json:"src"`
						StateVariable    bool   `json:"stateVariable"`
						StorageLocation  string `json:"storageLocation"`
						TypeDescriptions struct {
							TypeIdentifier string `json:"typeIdentifier"`
							TypeString     string `json:"typeString"`
						} `json:"typeDescriptions"`
						TypeName struct {
							ID               int    `json:"id"`
							Name             string `json:"name"`
							NodeType         string `json:"nodeType"`
							Src              string `json:"src"`
							StateMutability  string `json:"stateMutability"`
							TypeDescriptions struct {
								TypeIdentifier string `json:"typeIdentifier"`
								TypeString     string `json:"typeString"`
							} `json:"typeDescriptions"`
						} `json:"typeName"`
						Value      interface{} `json:"value"`
						Visibility string      `json:"visibility"`
					} `json:"parameters"`
					Src string `json:"src"`
				} `json:"parameters,omitempty"`
				Body struct {
					ID         int    `json:"id"`
					NodeType   string `json:"nodeType"`
					Src        string `json:"src"`
					Statements []struct {
						Condition struct {
							ArgumentTypes interface{} `json:"argumentTypes"`
							CommonType    struct {
								TypeIdentifier string `json:"typeIdentifier"`
								TypeString     string `json:"typeString"`
							} `json:"commonType"`
							ID              int  `json:"id"`
							IsConstant      bool `json:"isConstant"`
							IsLValue        bool `json:"isLValue"`
							IsPure          bool `json:"isPure"`
							LValueRequested bool `json:"lValueRequested"`
							LeftExpression  struct {
								ArgumentTypes  interface{} `json:"argumentTypes"`
								BaseExpression struct {
									ArgumentTypes          interface{}   `json:"argumentTypes"`
									ID                     int           `json:"id"`
									Name                   string        `json:"name"`
									NodeType               string        `json:"nodeType"`
									OverloadedDeclarations []interface{} `json:"overloadedDeclarations"`
									ReferencedDeclaration  int           `json:"referencedDeclaration"`
									Src                    string        `json:"src"`
									TypeDescriptions       struct {
										TypeIdentifier string `json:"typeIdentifier"`
										TypeString     string `json:"typeString"`
									} `json:"typeDescriptions"`
								} `json:"baseExpression"`
								ID              int `json:"id"`
								IndexExpression struct {
									ArgumentTypes          interface{}   `json:"argumentTypes"`
									ID                     int           `json:"id"`
									Name                   string        `json:"name"`
									NodeType               string        `json:"nodeType"`
									OverloadedDeclarations []interface{} `json:"overloadedDeclarations"`
									ReferencedDeclaration  int           `json:"referencedDeclaration"`
									Src                    string        `json:"src"`
									TypeDescriptions       struct {
										TypeIdentifier string `json:"typeIdentifier"`
										TypeString     string `json:"typeString"`
									} `json:"typeDescriptions"`
								} `json:"indexExpression"`
								IsConstant       bool   `json:"isConstant"`
								IsLValue         bool   `json:"isLValue"`
								IsPure           bool   `json:"isPure"`
								LValueRequested  bool   `json:"lValueRequested"`
								NodeType         string `json:"nodeType"`
								Src              string `json:"src"`
								TypeDescriptions struct {
									TypeIdentifier string `json:"typeIdentifier"`
									TypeString     string `json:"typeString"`
								} `json:"typeDescriptions"`
							} `json:"leftExpression"`
							NodeType        string `json:"nodeType"`
							Operator        string `json:"operator"`
							RightExpression struct {
								ArgumentTypes interface{} `json:"argumentTypes"`
								Expression    struct {
									ArgumentTypes          interface{}   `json:"argumentTypes"`
									ID                     int           `json:"id"`
									Name                   string        `json:"name"`
									NodeType               string        `json:"nodeType"`
									OverloadedDeclarations []interface{} `json:"overloadedDeclarations"`
									ReferencedDeclaration  int           `json:"referencedDeclaration"`
									Src                    string        `json:"src"`
									TypeDescriptions       struct {
										TypeIdentifier string `json:"typeIdentifier"`
										TypeString     string `json:"typeString"`
									} `json:"typeDescriptions"`
								} `json:"expression"`
								ID                    int         `json:"id"`
								IsConstant            bool        `json:"isConstant"`
								IsLValue              bool        `json:"isLValue"`
								IsPure                bool        `json:"isPure"`
								LValueRequested       bool        `json:"lValueRequested"`
								MemberName            string      `json:"memberName"`
								NodeType              string      `json:"nodeType"`
								ReferencedDeclaration interface{} `json:"referencedDeclaration"`
								Src                   string      `json:"src"`
								TypeDescriptions      struct {
									TypeIdentifier string `json:"typeIdentifier"`
									TypeString     string `json:"typeString"`
								} `json:"typeDescriptions"`
							} `json:"rightExpression"`
							Src              string `json:"src"`
							TypeDescriptions struct {
								TypeIdentifier string `json:"typeIdentifier"`
								TypeString     string `json:"typeString"`
							} `json:"typeDescriptions"`
						} `json:"condition,omitempty"`
						FalseBody interface{} `json:"falseBody,omitempty"`
						ID        int         `json:"id"`
						NodeType  string      `json:"nodeType"`
						Src       string      `json:"src"`
						TrueBody  struct {
							ID         int    `json:"id"`
							NodeType   string `json:"nodeType"`
							Src        string `json:"src"`
							Statements []struct {
								Expression               interface{} `json:"expression"`
								FunctionReturnParameters int         `json:"functionReturnParameters"`
								ID                       int         `json:"id"`
								NodeType                 string      `json:"nodeType"`
								Src                      string      `json:"src"`
							} `json:"statements"`
						} `json:"trueBody,omitempty"`
						Expression struct {
							ArgumentTypes   interface{} `json:"argumentTypes"`
							ID              int         `json:"id"`
							IsConstant      bool        `json:"isConstant"`
							IsLValue        bool        `json:"isLValue"`
							IsPure          bool        `json:"isPure"`
							LValueRequested bool        `json:"lValueRequested"`
							LeftHandSide    struct {
								ArgumentTypes  interface{} `json:"argumentTypes"`
								BaseExpression struct {
									ArgumentTypes          interface{}   `json:"argumentTypes"`
									ID                     int           `json:"id"`
									Name                   string        `json:"name"`
									NodeType               string        `json:"nodeType"`
									OverloadedDeclarations []interface{} `json:"overloadedDeclarations"`
									ReferencedDeclaration  int           `json:"referencedDeclaration"`
									Src                    string        `json:"src"`
									TypeDescriptions       struct {
										TypeIdentifier string `json:"typeIdentifier"`
										TypeString     string `json:"typeString"`
									} `json:"typeDescriptions"`
								} `json:"baseExpression"`
								ID              int `json:"id"`
								IndexExpression struct {
									ArgumentTypes          interface{}   `json:"argumentTypes"`
									ID                     int           `json:"id"`
									Name                   string        `json:"name"`
									NodeType               string        `json:"nodeType"`
									OverloadedDeclarations []interface{} `json:"overloadedDeclarations"`
									ReferencedDeclaration  int           `json:"referencedDeclaration"`
									Src                    string        `json:"src"`
									TypeDescriptions       struct {
										TypeIdentifier string `json:"typeIdentifier"`
										TypeString     string `json:"typeString"`
									} `json:"typeDescriptions"`
								} `json:"indexExpression"`
								IsConstant       bool   `json:"isConstant"`
								IsLValue         bool   `json:"isLValue"`
								IsPure           bool   `json:"isPure"`
								LValueRequested  bool   `json:"lValueRequested"`
								NodeType         string `json:"nodeType"`
								Src              string `json:"src"`
								TypeDescriptions struct {
									TypeIdentifier string `json:"typeIdentifier"`
									TypeString     string `json:"typeString"`
								} `json:"typeDescriptions"`
							} `json:"leftHandSide"`
							NodeType      string `json:"nodeType"`
							Operator      string `json:"operator"`
							RightHandSide struct {
								ArgumentTypes interface{} `json:"argumentTypes"`
								Expression    struct {
									ArgumentTypes          interface{}   `json:"argumentTypes"`
									ID                     int           `json:"id"`
									Name                   string        `json:"name"`
									NodeType               string        `json:"nodeType"`
									OverloadedDeclarations []interface{} `json:"overloadedDeclarations"`
									ReferencedDeclaration  int           `json:"referencedDeclaration"`
									Src                    string        `json:"src"`
									TypeDescriptions       struct {
										TypeIdentifier string `json:"typeIdentifier"`
										TypeString     string `json:"typeString"`
									} `json:"typeDescriptions"`
								} `json:"expression"`
								ID                    int         `json:"id"`
								IsConstant            bool        `json:"isConstant"`
								IsLValue              bool        `json:"isLValue"`
								IsPure                bool        `json:"isPure"`
								LValueRequested       bool        `json:"lValueRequested"`
								MemberName            string      `json:"memberName"`
								NodeType              string      `json:"nodeType"`
								ReferencedDeclaration interface{} `json:"referencedDeclaration"`
								Src                   string      `json:"src"`
								TypeDescriptions      struct {
									TypeIdentifier string `json:"typeIdentifier"`
									TypeString     string `json:"typeString"`
								} `json:"typeDescriptions"`
							} `json:"rightHandSide"`
							Src              string `json:"src"`
							TypeDescriptions struct {
								TypeIdentifier string `json:"typeIdentifier"`
								TypeString     string `json:"typeString"`
							} `json:"typeDescriptions"`
						} `json:"expression,omitempty"`
						EventCall struct {
							ArgumentTypes interface{} `json:"argumentTypes"`
							Arguments     []struct {
								ArgumentTypes          interface{}   `json:"argumentTypes"`
								ID                     int           `json:"id"`
								Name                   string        `json:"name"`
								NodeType               string        `json:"nodeType"`
								OverloadedDeclarations []interface{} `json:"overloadedDeclarations"`
								ReferencedDeclaration  int           `json:"referencedDeclaration"`
								Src                    string        `json:"src"`
								TypeDescriptions       struct {
									TypeIdentifier string `json:"typeIdentifier"`
									TypeString     string `json:"typeString"`
								} `json:"typeDescriptions"`
							} `json:"arguments"`
							Expression struct {
								ArgumentTypes []struct {
									TypeIdentifier string `json:"typeIdentifier"`
									TypeString     string `json:"typeString"`
								} `json:"argumentTypes"`
								ID                     int           `json:"id"`
								Name                   string        `json:"name"`
								NodeType               string        `json:"nodeType"`
								OverloadedDeclarations []interface{} `json:"overloadedDeclarations"`
								ReferencedDeclaration  int           `json:"referencedDeclaration"`
								Src                    string        `json:"src"`
								TypeDescriptions       struct {
									TypeIdentifier string `json:"typeIdentifier"`
									TypeString     string `json:"typeString"`
								} `json:"typeDescriptions"`
							} `json:"expression"`
							ID               int           `json:"id"`
							IsConstant       bool          `json:"isConstant"`
							IsLValue         bool          `json:"isLValue"`
							IsPure           bool          `json:"isPure"`
							Kind             string        `json:"kind"`
							LValueRequested  bool          `json:"lValueRequested"`
							Names            []interface{} `json:"names"`
							NodeType         string        `json:"nodeType"`
							Src              string        `json:"src"`
							TypeDescriptions struct {
								TypeIdentifier string `json:"typeIdentifier"`
								TypeString     string `json:"typeString"`
							} `json:"typeDescriptions"`
						} `json:"eventCall,omitempty"`
					} `json:"statements"`
				} `json:"body,omitempty"`
				Implemented bool   `json:"implemented,omitempty"`
				Kind        string `json:"kind,omitempty"`
				Modifiers   []struct {
					Arguments    interface{} `json:"arguments"`
					ID           int         `json:"id"`
					ModifierName struct {
						ArgumentTypes          interface{}   `json:"argumentTypes"`
						ID                     int           `json:"id"`
						Name                   string        `json:"name"`
						NodeType               string        `json:"nodeType"`
						OverloadedDeclarations []interface{} `json:"overloadedDeclarations"`
						ReferencedDeclaration  int           `json:"referencedDeclaration"`
						Src                    string        `json:"src"`
						TypeDescriptions       struct {
							TypeIdentifier string `json:"typeIdentifier"`
							TypeString     string `json:"typeString"`
						} `json:"typeDescriptions"`
					} `json:"modifierName"`
					NodeType string `json:"nodeType"`
					Src      string `json:"src"`
				} `json:"modifiers,omitempty"`
				ReturnParameters struct {
					ID         int           `json:"id"`
					NodeType   string        `json:"nodeType"`
					Parameters []interface{} `json:"parameters"`
					Src        string        `json:"src"`
				} `json:"returnParameters,omitempty"`
				StateMutability string      `json:"stateMutability,omitempty"`
				SuperFunction   interface{} `json:"superFunction,omitempty"`
			} `json:"nodes,omitempty"`
		} `json:"nodes"`
		Src string `json:"src"`
	} `json:"ast"`
	LegacyAST struct {
		AbsolutePath    string `json:"absolutePath"`
		ExportedSymbols struct {
			AddressWhitelist []int `json:"AddressWhitelist"`
		} `json:"exportedSymbols"`
		ID       int    `json:"id"`
		NodeType string `json:"nodeType"`
		Nodes    []struct {
			ID            int           `json:"id"`
			Literals      []string      `json:"literals,omitempty"`
			NodeType      string        `json:"nodeType"`
			Src           string        `json:"src"`
			AbsolutePath  string        `json:"absolutePath,omitempty"`
			File          string        `json:"file,omitempty"`
			Scope         int           `json:"scope,omitempty"`
			SourceUnit    int           `json:"sourceUnit,omitempty"`
			SymbolAliases []interface{} `json:"symbolAliases,omitempty"`
			UnitAlias     string        `json:"unitAlias,omitempty"`
			BaseContracts []struct {
				Arguments interface{} `json:"arguments"`
				BaseName  struct {
					ContractScope         interface{} `json:"contractScope"`
					ID                    int         `json:"id"`
					Name                  string      `json:"name"`
					NodeType              string      `json:"nodeType"`
					ReferencedDeclaration int         `json:"referencedDeclaration"`
					Src                   string      `json:"src"`
					TypeDescriptions      struct {
						TypeIdentifier string `json:"typeIdentifier"`
						TypeString     string `json:"typeString"`
					} `json:"typeDescriptions"`
				} `json:"baseName"`
				ID       int    `json:"id"`
				NodeType string `json:"nodeType"`
				Src      string `json:"src"`
			} `json:"baseContracts,omitempty"`
			ContractDependencies    []int  `json:"contractDependencies,omitempty"`
			ContractKind            string `json:"contractKind,omitempty"`
			Documentation           string `json:"documentation,omitempty"`
			FullyImplemented        bool   `json:"fullyImplemented,omitempty"`
			LinearizedBaseContracts []int  `json:"linearizedBaseContracts,omitempty"`
			Name                    string `json:"name,omitempty"`
			Nodes                   []struct {
				CanonicalName string `json:"canonicalName,omitempty"`
				ID            int    `json:"id"`
				Members       []struct {
					ID       int    `json:"id"`
					Name     string `json:"name"`
					NodeType string `json:"nodeType"`
					Src      string `json:"src"`
				} `json:"members,omitempty"`
				Name             string `json:"name"`
				NodeType         string `json:"nodeType"`
				Src              string `json:"src"`
				Constant         bool   `json:"constant,omitempty"`
				Scope            int    `json:"scope,omitempty"`
				StateVariable    bool   `json:"stateVariable,omitempty"`
				StorageLocation  string `json:"storageLocation,omitempty"`
				TypeDescriptions struct {
					TypeIdentifier string `json:"typeIdentifier"`
					TypeString     string `json:"typeString"`
				} `json:"typeDescriptions,omitempty"`
				Value         interface{} `json:"value,omitempty"`
				Visibility    string      `json:"visibility,omitempty"`
				TypeName      `json:"typeName,omitempty"`
				Anonymous     bool        `json:"anonymous,omitempty"`
				Documentation interface{} `json:"documentation,omitempty"`
				Parameters    struct {
					ID         int    `json:"id"`
					NodeType   string `json:"nodeType"`
					Parameters []struct {
						Constant         bool   `json:"constant"`
						ID               int    `json:"id"`
						Indexed          bool   `json:"indexed"`
						Name             string `json:"name"`
						NodeType         string `json:"nodeType"`
						Scope            int    `json:"scope"`
						Src              string `json:"src"`
						StateVariable    bool   `json:"stateVariable"`
						StorageLocation  string `json:"storageLocation"`
						TypeDescriptions struct {
							TypeIdentifier string `json:"typeIdentifier"`
							TypeString     string `json:"typeString"`
						} `json:"typeDescriptions"`
						Value      interface{} `json:"value"`
						Visibility string      `json:"visibility"`
					} `json:"parameters"`
					Src string `json:"src"`
				} `json:"parameters,omitempty"`
				Body struct {
					ID         int    `json:"id"`
					NodeType   string `json:"nodeType"`
					Src        string `json:"src"`
					Statements []struct {
						Condition struct {
							ArgumentTypes interface{} `json:"argumentTypes"`
							CommonType    struct {
								TypeIdentifier string `json:"typeIdentifier"`
								TypeString     string `json:"typeString"`
							} `json:"commonType"`
							ID              int  `json:"id"`
							IsConstant      bool `json:"isConstant"`
							IsLValue        bool `json:"isLValue"`
							IsPure          bool `json:"isPure"`
							LValueRequested bool `json:"lValueRequested"`
							LeftExpression  struct {
								ArgumentTypes  interface{} `json:"argumentTypes"`
								BaseExpression struct {
									ArgumentTypes          interface{}   `json:"argumentTypes"`
									ID                     int           `json:"id"`
									Name                   string        `json:"name"`
									NodeType               string        `json:"nodeType"`
									OverloadedDeclarations []interface{} `json:"overloadedDeclarations"`
									ReferencedDeclaration  int           `json:"referencedDeclaration"`
									Src                    string        `json:"src"`
									TypeDescriptions       struct {
										TypeIdentifier string `json:"typeIdentifier"`
										TypeString     string `json:"typeString"`
									} `json:"typeDescriptions"`
								} `json:"baseExpression"`
								ID              int `json:"id"`
								IndexExpression struct {
									ArgumentTypes          interface{}   `json:"argumentTypes"`
									ID                     int           `json:"id"`
									Name                   string        `json:"name"`
									NodeType               string        `json:"nodeType"`
									OverloadedDeclarations []interface{} `json:"overloadedDeclarations"`
									ReferencedDeclaration  int           `json:"referencedDeclaration"`
									Src                    string        `json:"src"`
									TypeDescriptions       struct {
										TypeIdentifier string `json:"typeIdentifier"`
										TypeString     string `json:"typeString"`
									} `json:"typeDescriptions"`
								} `json:"indexExpression"`
								IsConstant       bool   `json:"isConstant"`
								IsLValue         bool   `json:"isLValue"`
								IsPure           bool   `json:"isPure"`
								LValueRequested  bool   `json:"lValueRequested"`
								NodeType         string `json:"nodeType"`
								Src              string `json:"src"`
								TypeDescriptions struct {
									TypeIdentifier string `json:"typeIdentifier"`
									TypeString     string `json:"typeString"`
								} `json:"typeDescriptions"`
							} `json:"leftExpression"`
							NodeType        string `json:"nodeType"`
							Operator        string `json:"operator"`
							RightExpression struct {
								ArgumentTypes interface{} `json:"argumentTypes"`
								Expression    struct {
									ArgumentTypes          interface{}   `json:"argumentTypes"`
									ID                     int           `json:"id"`
									Name                   string        `json:"name"`
									NodeType               string        `json:"nodeType"`
									OverloadedDeclarations []interface{} `json:"overloadedDeclarations"`
									ReferencedDeclaration  int           `json:"referencedDeclaration"`
									Src                    string        `json:"src"`
									TypeDescriptions       struct {
										TypeIdentifier string `json:"typeIdentifier"`
										TypeString     string `json:"typeString"`
									} `json:"typeDescriptions"`
								} `json:"expression"`
								ID                    int         `json:"id"`
								IsConstant            bool        `json:"isConstant"`
								IsLValue              bool        `json:"isLValue"`
								IsPure                bool        `json:"isPure"`
								LValueRequested       bool        `json:"lValueRequested"`
								MemberName            string      `json:"memberName"`
								NodeType              string      `json:"nodeType"`
								ReferencedDeclaration interface{} `json:"referencedDeclaration"`
								Src                   string      `json:"src"`
								TypeDescriptions      struct {
									TypeIdentifier string `json:"typeIdentifier"`
									TypeString     string `json:"typeString"`
								} `json:"typeDescriptions"`
							} `json:"rightExpression"`
							Src              string `json:"src"`
							TypeDescriptions struct {
								TypeIdentifier string `json:"typeIdentifier"`
								TypeString     string `json:"typeString"`
							} `json:"typeDescriptions"`
						} `json:"condition,omitempty"`
						FalseBody interface{} `json:"falseBody,omitempty"`
						ID        int         `json:"id"`
						NodeType  string      `json:"nodeType"`
						Src       string      `json:"src"`
						TrueBody  struct {
							ID         int    `json:"id"`
							NodeType   string `json:"nodeType"`
							Src        string `json:"src"`
							Statements []struct {
								Expression               interface{} `json:"expression"`
								FunctionReturnParameters int         `json:"functionReturnParameters"`
								ID                       int         `json:"id"`
								NodeType                 string      `json:"nodeType"`
								Src                      string      `json:"src"`
							} `json:"statements"`
						} `json:"trueBody,omitempty"`
						Expression struct {
							ArgumentTypes   interface{} `json:"argumentTypes"`
							ID              int         `json:"id"`
							IsConstant      bool        `json:"isConstant"`
							IsLValue        bool        `json:"isLValue"`
							IsPure          bool        `json:"isPure"`
							LValueRequested bool        `json:"lValueRequested"`
							LeftHandSide    struct {
								ArgumentTypes  interface{} `json:"argumentTypes"`
								BaseExpression struct {
									ArgumentTypes          interface{}   `json:"argumentTypes"`
									ID                     int           `json:"id"`
									Name                   string        `json:"name"`
									NodeType               string        `json:"nodeType"`
									OverloadedDeclarations []interface{} `json:"overloadedDeclarations"`
									ReferencedDeclaration  int           `json:"referencedDeclaration"`
									Src                    string        `json:"src"`
									TypeDescriptions       struct {
										TypeIdentifier string `json:"typeIdentifier"`
										TypeString     string `json:"typeString"`
									} `json:"typeDescriptions"`
								} `json:"baseExpression"`
								ID              int `json:"id"`
								IndexExpression struct {
									ArgumentTypes          interface{}   `json:"argumentTypes"`
									ID                     int           `json:"id"`
									Name                   string        `json:"name"`
									NodeType               string        `json:"nodeType"`
									OverloadedDeclarations []interface{} `json:"overloadedDeclarations"`
									ReferencedDeclaration  int           `json:"referencedDeclaration"`
									Src                    string        `json:"src"`
									TypeDescriptions       struct {
										TypeIdentifier string `json:"typeIdentifier"`
										TypeString     string `json:"typeString"`
									} `json:"typeDescriptions"`
								} `json:"indexExpression"`
								IsConstant       bool   `json:"isConstant"`
								IsLValue         bool   `json:"isLValue"`
								IsPure           bool   `json:"isPure"`
								LValueRequested  bool   `json:"lValueRequested"`
								NodeType         string `json:"nodeType"`
								Src              string `json:"src"`
								TypeDescriptions struct {
									TypeIdentifier string `json:"typeIdentifier"`
									TypeString     string `json:"typeString"`
								} `json:"typeDescriptions"`
							} `json:"leftHandSide"`
							NodeType      string `json:"nodeType"`
							Operator      string `json:"operator"`
							RightHandSide struct {
								ArgumentTypes interface{} `json:"argumentTypes"`
								Expression    struct {
									ArgumentTypes          interface{}   `json:"argumentTypes"`
									ID                     int           `json:"id"`
									Name                   string        `json:"name"`
									NodeType               string        `json:"nodeType"`
									OverloadedDeclarations []interface{} `json:"overloadedDeclarations"`
									ReferencedDeclaration  int           `json:"referencedDeclaration"`
									Src                    string        `json:"src"`
									TypeDescriptions       struct {
										TypeIdentifier string `json:"typeIdentifier"`
										TypeString     string `json:"typeString"`
									} `json:"typeDescriptions"`
								} `json:"expression"`
								ID                    int         `json:"id"`
								IsConstant            bool        `json:"isConstant"`
								IsLValue              bool        `json:"isLValue"`
								IsPure                bool        `json:"isPure"`
								LValueRequested       bool        `json:"lValueRequested"`
								MemberName            string      `json:"memberName"`
								NodeType              string      `json:"nodeType"`
								ReferencedDeclaration interface{} `json:"referencedDeclaration"`
								Src                   string      `json:"src"`
								TypeDescriptions      struct {
									TypeIdentifier string `json:"typeIdentifier"`
									TypeString     string `json:"typeString"`
								} `json:"typeDescriptions"`
							} `json:"rightHandSide"`
							Src              string `json:"src"`
							TypeDescriptions struct {
								TypeIdentifier string `json:"typeIdentifier"`
								TypeString     string `json:"typeString"`
							} `json:"typeDescriptions"`
						} `json:"expression,omitempty"`
						EventCall struct {
							ArgumentTypes interface{} `json:"argumentTypes"`
							Arguments     []struct {
								ArgumentTypes          interface{}   `json:"argumentTypes"`
								ID                     int           `json:"id"`
								Name                   string        `json:"name"`
								NodeType               string        `json:"nodeType"`
								OverloadedDeclarations []interface{} `json:"overloadedDeclarations"`
								ReferencedDeclaration  int           `json:"referencedDeclaration"`
								Src                    string        `json:"src"`
								TypeDescriptions       struct {
									TypeIdentifier string `json:"typeIdentifier"`
									TypeString     string `json:"typeString"`
								} `json:"typeDescriptions"`
							} `json:"arguments"`
							Expression struct {
								ArgumentTypes []struct {
									TypeIdentifier string `json:"typeIdentifier"`
									TypeString     string `json:"typeString"`
								} `json:"argumentTypes"`
								ID                     int           `json:"id"`
								Name                   string        `json:"name"`
								NodeType               string        `json:"nodeType"`
								OverloadedDeclarations []interface{} `json:"overloadedDeclarations"`
								ReferencedDeclaration  int           `json:"referencedDeclaration"`
								Src                    string        `json:"src"`
								TypeDescriptions       struct {
									TypeIdentifier string `json:"typeIdentifier"`
									TypeString     string `json:"typeString"`
								} `json:"typeDescriptions"`
							} `json:"expression"`
							ID               int           `json:"id"`
							IsConstant       bool          `json:"isConstant"`
							IsLValue         bool          `json:"isLValue"`
							IsPure           bool          `json:"isPure"`
							Kind             string        `json:"kind"`
							LValueRequested  bool          `json:"lValueRequested"`
							Names            []interface{} `json:"names"`
							NodeType         string        `json:"nodeType"`
							Src              string        `json:"src"`
							TypeDescriptions struct {
								TypeIdentifier string `json:"typeIdentifier"`
								TypeString     string `json:"typeString"`
							} `json:"typeDescriptions"`
						} `json:"eventCall,omitempty"`
					} `json:"statements"`
				} `json:"body,omitempty"`
				Implemented bool   `json:"implemented,omitempty"`
				Kind        string `json:"kind,omitempty"`
				Modifiers   []struct {
					Arguments    interface{} `json:"arguments"`
					ID           int         `json:"id"`
					ModifierName struct {
						ArgumentTypes          interface{}   `json:"argumentTypes"`
						ID                     int           `json:"id"`
						Name                   string        `json:"name"`
						NodeType               string        `json:"nodeType"`
						OverloadedDeclarations []interface{} `json:"overloadedDeclarations"`
						ReferencedDeclaration  int           `json:"referencedDeclaration"`
						Src                    string        `json:"src"`
						TypeDescriptions       struct {
							TypeIdentifier string `json:"typeIdentifier"`
							TypeString     string `json:"typeString"`
						} `json:"typeDescriptions"`
					} `json:"modifierName"`
					NodeType string `json:"nodeType"`
					Src      string `json:"src"`
				} `json:"modifiers,omitempty"`
				ReturnParameters struct {
					ID         int           `json:"id"`
					NodeType   string        `json:"nodeType"`
					Parameters []interface{} `json:"parameters"`
					Src        string        `json:"src"`
				} `json:"returnParameters,omitempty"`
				StateMutability string      `json:"stateMutability,omitempty"`
				SuperFunction   interface{} `json:"superFunction,omitempty"`
			} `json:"nodes,omitempty"`
		} `json:"nodes"`
		Src string `json:"src"`
	} `json:"legacyAST"`
	Compiler struct {
		Name    string `json:"name"`
		Version string `json:"version"`
	} `json:"compiler"`
	Networks struct {
	} `json:"networks"`
	SchemaVersion string    `json:"schemaVersion"`
	UpdatedAt     time.Time `json:"updatedAt"`
	Devdoc        struct {
		Methods struct {
			GetWhitelist struct {
				Details string `json:"details"`
			} `json:"getWhitelist()"`
			IsOwner struct {
				Details string `json:"details"`
			} `json:"isOwner()"`
			Owner struct {
				Details string `json:"details"`
			} `json:"owner()"`
			RenounceOwnership struct {
				Details string `json:"details"`
			} `json:"renounceOwnership()"`
			TransferOwnershipAddress struct {
				Details string `json:"details"`
			} `json:"transferOwnership(address)"`
		} `json:"methods"`
		Title string `json:"title"`
	} `json:"devdoc"`
	Userdoc struct {
		Methods struct {
			AddToWhitelistAddress struct {
				Notice string `json:"notice"`
			} `json:"addToWhitelist(address)"`
			GetWhitelist struct {
				Notice string `json:"notice"`
			} `json:"getWhitelist()"`
			IsOnWhitelistAddress struct {
				Notice string `json:"notice"`
			} `json:"isOnWhitelist(address)"`
			RemoveFromWhitelistAddress struct {
				Notice string `json:"notice"`
			} `json:"removeFromWhitelist(address)"`
		} `json:"methods"`
	} `json:"userdoc"`
}

type TypeName struct {
	ID               int    `json:"id"`
	Name             string `json:"name"`
	NodeType         string `json:"nodeType"`
	Src              string `json:"src"`
	StateMutability  string `json:"stateMutability"`
	TypeDescriptions struct {
		TypeIdentifier string `json:"typeIdentifier"`
		TypeString     string `json:"typeString"`
	} `json:"typeDescriptions"`
}
